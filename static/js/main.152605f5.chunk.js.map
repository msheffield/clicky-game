{"version":3,"sources":["components/Jumbotron.js","components/Score.js","components/ImageCard.js","components/Gameboard.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","children","style","height","clear","textAlign","className","Score","styles","width","ImageCard","props","id","alt","src","onClick","click","Gameboard","state","score","topScore","images","frogs","clicked","clickedImage","event","target","console","log","includes","setState","subClicked","push","Math","max","randomizeArray","array","i","length","j","floor","random","this","map","img","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m4EAaeA,MAXf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,UAAW,UAChDC,UAAU,aAETL,I,mCCKQM,MAXf,YAA8B,IAAbN,EAAY,EAAZA,SACf,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,UAAW,UAChDC,UAAU,OAENL,ICNJO,EAAS,CACXC,MAAO,QACPN,OAAQ,QAWGO,MARf,SAAmBC,GACf,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,WAAWJ,MAAOM,EAAQI,GAAID,EAAMC,GAAIC,IAAKF,EAAME,IAAKC,IAAKH,EAAMG,IAAKC,QAASJ,EAAMK,U,OCoEnGC,E,2MAtEXC,MAAQ,CACJC,MAAO,EACPC,SAAU,EACVC,OAAQC,EACRC,QAAS,I,EAGbC,aAAe,SAACC,GACZ,IAAIb,EAAKa,EAAMC,OAAOd,GAItB,GAHAe,QAAQC,IAAIhB,GAGR,EAAKM,MAAMK,QAAQM,SAASjB,GAC5Be,QAAQC,IAAI,sBACZD,QAAQC,IAAI,EAAKV,MAAMK,SACvB,EAAKO,SAAS,CACVX,MAAO,EACPI,QAAS,SAIZ,CACDI,QAAQC,IAAI,kBACZ,IAAIG,EAAa,EAAKb,MAAMK,QAC5BQ,EAAWC,KAAKpB,GAChB,EAAKkB,SAAS,CACVX,MAAO,EAAKD,MAAMC,MAAQ,EAC1BC,SAAUa,KAAKC,IAAI,EAAKhB,MAAME,SAAU,EAAKF,MAAMC,MAAQ,GAC3DI,QAASQ,IAEbJ,QAAQC,IAAI,EAAKV,MAAMK,SAG3B,EAAKY,eAAe,EAAKjB,MAAMG,S,EAInCc,eAAiB,SAACC,GACd,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIN,KAAKO,MAAMP,KAAKQ,UAAYJ,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,O,wEAMrC,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,KACI,yBAAKjC,UAAU,qBACX,2CAAiBoC,KAAKxB,MAAMC,QAEhC,yBAAKb,UAAU,qBACX,0CAAgBoC,KAAKxB,MAAME,YAGnC,yBAAKd,UAAU,gBACVoC,KAAKxB,MAAMG,OAAOsB,KAAI,SAAAC,GAAG,OACtB,kBAAC,EAAD,CACIhC,GAAIgC,EAAIhC,GACRE,IAAK8B,EAAI9B,IACTE,MAAO,EAAKQ,wB,GA9DhBqB,a,MCaTC,MAdf,WAEE,OACE,6BACE,kBAAC,EAAD,KACE,4CACA,oEAGF,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.152605f5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\nfunction Score({ children }) {\n  return (\n    <div\n      style={{ height: 100, clear: \"both\", textAlign: \"center\" }}\n      className=\"row\"\n    >\n        { children }\n    </div>\n  );\n}\n\nexport default Score;\n","import React from \"react\";\n\nconst styles = {\n    width: \"150px\",\n    height: \"auto\"\n}\n\nfunction ImageCard(props) {\n    return (\n        <div className=\"card\">\n            <img className=\"card-img\" style={styles} id={props.id} alt={props.alt} src={props.src} onClick={props.click}/>\n        </div>\n    )\n}\n\nexport default ImageCard;\n","import React, { Component } from \"react\";\nimport Score from \"./Score\";\nimport ImageCard from \"./ImageCard\";\nimport frogs from \"../frogs.json\";\n\n\nclass Gameboard extends Component {\n    // state\n    state = {\n        score: 0,\n        topScore: 0,\n        images: frogs,\n        clicked: []\n    }\n\n    clickedImage = (event) => {\n        let id = event.target.id;\n        console.log(id);\n\n        // If state clicked includes the element\n        if (this.state.clicked.includes(id)) {\n            console.log(\"Duplicate clicked!\");\n            console.log(this.state.clicked);\n            this.setState({\n                score: 0,\n                clicked: []\n            })\n        }\n        // Update states with new score and check if topScore has been set\n        else {\n            console.log(\"Unique clicked\");\n            let subClicked = this.state.clicked;\n            subClicked.push(id);\n            this.setState({\n                score: this.state.score + 1,\n                topScore: Math.max(this.state.topScore, this.state.score + 1),\n                clicked: subClicked,\n            })\n            console.log(this.state.clicked);\n        }\n\n        this.randomizeArray(this.state.images);\n    }\n\n    // Found shuffle function from stackoverflow, Fisher Yates Shuffle\n    randomizeArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Score>\n                    <div className=\"col-md-6 col-xs-2\">\n                        <h5>Your Score: {this.state.score}</h5>\n                    </div>\n                    <div className=\"col-md-6 col-xs-2\">\n                        <h5>Top Score: {this.state.topScore}</h5>\n                    </div>\n                </Score>\n                <div className=\"card-columns\">\n                    {this.state.images.map(img =>\n                        <ImageCard\n                            id={img.id}\n                            src={img.src}\n                            click={this.clickedImage}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Gameboard;\n","import React from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport Gameboard from './components/Gameboard';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Clicky Game!</h1>\n        <h3>Don't click on the same image twice</h3>\n      </Jumbotron>\n\n      <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}